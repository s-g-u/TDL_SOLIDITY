{
  "language": "Solidity",
  "sources": {
    "src/CrowdFunding.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport { AggregatorV3Interface } from \"../lib/chainlink-brownie-contracts/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\";\nimport { PriceConverter } from \"./PriceConverter.sol\";\n\nerror CrowdFunding__NotOwner();\nerror CrowdFunding__WithdrawFailed();\n\ncontract CrowdFunding {\n    using PriceConverter for uint256;\n\n    mapping(address => uint256) public addressToAmountFunded;\n    address[] public funders;\n\n    address public immutable i_owner;\n    uint256 public constant MINIMUM_USD = 5 * 10 ** 18;\n    AggregatorV3Interface private s_priceFeed;\n\n    // Eventos básicos para tracking\n    event FundReceived(address indexed funder, uint256 amount);\n    event FundsWithdrawn(address indexed owner, uint256 amount);\n\n    constructor(address priceFeed) {\n        i_owner = msg.sender;\n        s_priceFeed = AggregatorV3Interface(priceFeed);\n    }\n\n    function fund() public payable {\n        require(msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD, \"El monto minimo es 5 USD\");\n        \n        // Solo agregar al array si es un nuevo donante (evita duplicados)\n        if (addressToAmountFunded[msg.sender] == 0) {\n            funders.push(msg.sender);\n        }\n        \n        addressToAmountFunded[msg.sender] += msg.value;\n        emit FundReceived(msg.sender, msg.value);\n    }\n\n    function getVersion() public view returns (uint256) {\n        return s_priceFeed.version();\n    }\n\n    modifier onlyOwner() {\n        if (msg.sender != i_owner) revert CrowdFunding__NotOwner();\n        _; // continua con la ejecución de la función\n    }\n\n    function withdraw() public onlyOwner {\n        uint256 contractBalance = address(this).balance;\n        \n        // Limpiar mappings y array\n        for (uint256 funderIndex = 0; funderIndex < funders.length; funderIndex++) {\n            address funder = funders[funderIndex];\n            addressToAmountFunded[funder] = 0;\n        }\n        funders = new address[](0);\n\n        // Transferir fondos\n        (bool callSuccess,) = payable(msg.sender).call{value: contractBalance}(\"\");\n        if (!callSuccess) revert CrowdFunding__WithdrawFailed();\n        \n        emit FundsWithdrawn(msg.sender, contractBalance);\n    }\n\n    function getTotalFunded() public view returns (uint256) {\n        return address(this).balance;\n    }\n\n    function getTotalFundedInUSD() public view returns (uint256) {\n        return address(this).balance.getConversionRate(s_priceFeed);\n    }\n\n    function getFundersCount() public view returns (uint256) {\n        return funders.length;\n    }\n\n    fallback() external payable {\n        fund();\n    }\n\n    receive() external payable {\n        fund();\n    }\n}"
    },
    "src/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport { AggregatorV3Interface } from \"../lib/chainlink-brownie-contracts/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\";\n\n// Why is this a library and not abstract?\n// Why not an interface?\nlibrary PriceConverter {\n    // We could make this public, but then we'd have to deploy it\n    function getPrice(AggregatorV3Interface priceFeed) internal view returns (uint256) {\n        // Sepolia ETH / USD Address\n        // https://docs.chain.link/data-feeds/price-feeds/addresses\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\n        // ETH/USD rate in 18 digit\n        return uint256(answer * 10000000000);\n    }\n\n    // 1000000000\n    function getConversionRate(uint256 ethAmount, AggregatorV3Interface priceFeed) internal view returns (uint256) {\n        uint256 ethPrice = getPrice(priceFeed);\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\n        // the actual ETH/USD conversion rate, after adjusting the extra 0s.\n        return ethAmountInUsd;\n    }\n}"
    },
    "lib/chainlink-brownie-contracts/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(\n    uint80 _roundId\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n\n  function latestRoundData()\n    external\n    view\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata"
        ],
        "": [
          "ast"
        ]
      }
    },
    "remappings": [
      "chainlink-brownie-contracts/=lib/chainlink-brownie-contracts/",
      "forge-std/=lib/forge-std/src/"
    ]
  }
}
